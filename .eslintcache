[{"/Users/navreetsingh/Desktop/covid-19-tracker/src/index.js":"1","/Users/navreetsingh/Desktop/covid-19-tracker/src/App.js":"2","/Users/navreetsingh/Desktop/covid-19-tracker/src/reportWebVitals.js":"3","/Users/navreetsingh/Desktop/covid-19-tracker/src/InfoBox.js":"4","/Users/navreetsingh/Desktop/covid-19-tracker/src/Table.js":"5","/Users/navreetsingh/Desktop/covid-19-tracker/src/util.js":"6","/Users/navreetsingh/Desktop/covid-19-tracker/src/LineGraph.js":"7"},{"size":500,"mtime":1608131671759,"results":"8","hashOfConfig":"9"},{"size":3951,"mtime":1608226777933,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607886014756,"results":"11","hashOfConfig":"9"},{"size":804,"mtime":1607994430252,"results":"12","hashOfConfig":"9"},{"size":475,"mtime":1607996685379,"results":"13","hashOfConfig":"9"},{"size":765,"mtime":1608131285542,"results":"14","hashOfConfig":"9"},{"size":2869,"mtime":1608137446330,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"15wv02n",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/navreetsingh/Desktop/covid-19-tracker/src/index.js",[],["35","36"],"/Users/navreetsingh/Desktop/covid-19-tracker/src/App.js",["37"],"import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, FormControl, MenuItem, Select} from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(()=> {\n    const getContriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map(country => ({\n            name: country.country, // United States, United Kingdom, France\n            value: country.countryInfo.iso2 // USA, UK, FR\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n      });\n    }\n\n    // Make getCountiesData call\n    getContriesData();\n  },[]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide'  ?  'https://disease.sh/v3/covid-19/all':\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n    });\n  }\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n\n          {/* Header */}\n          <h1>COVID-19 Tracker</h1>\n\n\n          {/* Title + Select input dropdown field */}\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined'\n              onChange={onCountryChange}\n              value={country}>\n                <MenuItem value='worldwide'>Worldwide</MenuItem>\n                {countries.map(country => (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n\n          {/* Info boxes title = covid cases*/}\n          <InfoBox\n            onClick = {e => setCasesType('cases')}\n            title='Covid Cases' \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}/>\n\n          {/* Info boxes title = covid recoveries*/}\n          <InfoBox\n            onClick = {e => setCasesType('recovered')}\n            title='Recovered' \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}/>\n\n          {/* Info boxes */}\n          <InfoBox\n            onClick = {e => setCasesType('deaths')}\n            title='Deaths' \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)}/>\n          \n        </div>\n\n        <div className='app__lineGraph'>\n          <h3>{country} new {casesType}</h3>\n          <LineGraph country={country} casesType={casesType}/>\n        </div>\n\n        <div className='app__dev'>\n          <br/>\n          <h4>Developed by:</h4> \n          <a href={\"mailto:\" + 'navreetsingh61@gmail.com'}>Navreet Singh</a>\n          <br/>\n        </div>\n\n      </div>\n\n      <Card className='app__right'>\n        <CardContent>\n          {/* Table */}\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/navreetsingh/Desktop/covid-19-tracker/src/reportWebVitals.js",[],"/Users/navreetsingh/Desktop/covid-19-tracker/src/InfoBox.js",[],"/Users/navreetsingh/Desktop/covid-19-tracker/src/Table.js",[],["38","39"],"/Users/navreetsingh/Desktop/covid-19-tracker/src/util.js",["40","41"],"import React from 'react';\nimport numeral from 'numeral';\n\nconst caseTypeColors = {\n    cases: {\n        hex: '#CC1034',\n        rgb: 'rgb(204, 16, 52)',\n        half_op: 'rgba(204, 16, 52, 0.5)',\n        multiplier: 800\n    },\n    recovered: {\n        hex: '#7dd71d',\n        rgb: 'rgb(125, 215, 29)',\n        half_op: 'rgba(125, 215, 29, 0.5)',\n        multiplier: 1200\n    },\n    deaths: {\n        hex: '#fb4443',\n        rgb: 'rgb(251, 68, 67)',\n        half_op: 'rgba(251, 68, 67, 0.5)',\n        multiplier: 2000\n    }\n}\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\n}\n\nexport const prettyPrintStat = (stat) => {return stat ? `+${numeral(stat).format('0.0a')}`: '+0'};","/Users/navreetsingh/Desktop/covid-19-tracker/src/LineGraph.js",["42","43"],"import { blue, red } from '@material-ui/core/colors';\nimport React,{ useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\nimport './LineGraph.css';\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: 'index',\n        intersects: false,\n        callbacks: {\n            label: function(tooltipItem, date){\n                return numeral(tooltipItem.value).format('+0.0');\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: 'time',\n                time: {\n                    format: 'MM/DD/YY',\n                    tooltipFormat: 'll',\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function(value, index, values){\n                        return numeral(value).format('0a');\n                    },\n                },\n            },\n        ],\n    },\n}\n\nfunction LineGraph({country, casesType = 'cases'}) {\n\n    const [data, setData] = useState({});\n\n    const buildChartData = (data, casesType) => {\n        const temp = data.hasOwnProperty('timeline') ? data['timeline'] : data\n        const chartData = [];\n        let lastDataPoint;\n        for(let date in temp[casesType]) {\n            if (lastDataPoint){\n                const newdataPoint = {\n                    x: date,\n                    y: temp[casesType][date]-lastDataPoint\n                }\n                chartData.push(newdataPoint);\n            }\n            lastDataPoint = temp[casesType][date];\n        }\n        return chartData;\n    }\n\n    useEffect(() => {\n        const code = country==='worldwide' ? 'all': country;\n        const fetchData = async () => {\n            await fetch(`https://disease.sh/v3/covid-19/historical/${code}?lastdays=0`)\n            .then(response => response.json())\n            .then(data => {\n                const chartData = buildChartData(data, casesType);\n                setData(chartData);\n            })\n        }\n        fetchData();\n    }, [country, casesType]);\n\n    return (\n        <div className='lineGraph'>\n            {data?.length > 0 && (\n                <Line\n                    options={options} \n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: 'rgba(204,16,52,0.5)',\n                                borderColor: '#CC1034',\n                                data: data\n                            }\n                        ]\n                    }}\n                />  \n            )}\n        </div>\n    )\n}\n\nexport default LineGraph;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":117,"column":30,"nodeType":"50","messageId":"51","endLine":117,"endColumn":31},{"ruleId":"44","replacedBy":"52"},{"ruleId":"46","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":13},{"ruleId":"54","severity":1,"message":"58","line":4,"column":7,"nodeType":"56","messageId":"57","endLine":4,"endColumn":21},{"ruleId":"54","severity":1,"message":"59","line":1,"column":10,"nodeType":"56","messageId":"57","endLine":1,"endColumn":14},{"ruleId":"54","severity":1,"message":"60","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":19},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["61"],["62"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'caseTypeColors' is assigned a value but never used.","'blue' is defined but never used.","'red' is defined but never used.","no-global-assign","no-unsafe-negation"]